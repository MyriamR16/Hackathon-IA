#!/usr/bin/env python3
"""
Script pour importer tous les pompiers depuis les donn√©es de planning
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models import Pompier
import pandas as pd
import secrets
import string

def generate_password(length=8):
    """G√©n√©rer un mot de passe al√©atoire s√©curis√©"""
    uppercase = string.ascii_uppercase
    lowercase = string.ascii_lowercase
    digits = string.digits
    special_chars = "!@#$%^&*"
    
    # S'assurer qu'on a au moins un caract√®re de chaque type
    password = [
        secrets.choice(uppercase),
        secrets.choice(lowercase),
        secrets.choice(digits),
        secrets.choice(special_chars)
    ]
    
    # Remplir le reste avec des caract√®res al√©atoires
    all_chars = uppercase + lowercase + digits + special_chars
    for _ in range(length - 4):
        password.append(secrets.choice(all_chars))
    
    # M√©langer le mot de passe
    secrets.SystemRandom().shuffle(password)
    return ''.join(password)

def get_pompiers_from_planning():
    """R√©cup√©rer la liste des pompiers depuis les donn√©es de planning"""
    try:
        # Lire le fichier CSV des disponibilit√©s
        csv_path = os.path.join(os.path.dirname(__file__), '..', 'disponibilites_2026.csv')
        if not os.path.exists(csv_path):
            print(f"‚ùå Fichier non trouv√©: {csv_path}")
            return []
        
        df = pd.read_csv(csv_path)
        
        # Extraire les pompiers depuis les colonnes (ignorer Date et Slot)
        pompiers_columns = [col for col in df.columns if col not in ['Date', 'Slot']]
        
        print(f"üìä Trouv√© {len(pompiers_columns)} pompiers dans les donn√©es de planning")
        return pompiers_columns
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture des donn√©es: {e}")
        return []

def import_all_pompiers():
    """Importer tous les pompiers manquants depuis les donn√©es de planning"""
    app = create_app()
    
    with app.app_context():
        # Cr√©er les tables si elles n'existent pas
        db.create_all()
        
        # R√©cup√©rer les pompiers depuis le planning
        pompiers_planning = get_pompiers_from_planning()
        
        if not pompiers_planning:
            print("‚ùå Aucun pompier trouv√© dans les donn√©es de planning")
            return
        
        # R√©cup√©rer les pompiers d√©j√† existants en base
        pompiers_existants = {p.nom for p in Pompier.query.all()}
        
        pompiers_ajoutes = 0
        pompiers_ignores = 0
        
        print("\nüîÑ Import des pompiers en cours...")
        print("=" * 50)
        
        for pompier_id in pompiers_planning:
            if pompier_id in pompiers_existants:
                print(f"‚è≠Ô∏è  Pompier {pompier_id} existe d√©j√† - ignor√©")
                pompiers_ignores += 1
                continue
            
            # G√©n√©rer un mot de passe s√©curis√©
            password = generate_password(12)
            
            # Cr√©er le nouveau pompier
            nouveau_pompier = Pompier(
                nom=pompier_id,
                prenom=f"Pompier {pompier_id}",
                grade="Sapeur de 2√®me classe (2CL)",  # Grade par d√©faut
                email=f"pompier.{pompier_id.lower()}@pompiers-pibrac.fr",
                adresse="",
                type_pompier='volontaire',
                role='user'
            )
            nouveau_pompier.set_password(password)
            
            # Sauvegarder en base
            db.session.add(nouveau_pompier)
            
            print(f"‚úÖ Pompier {pompier_id} ajout√©")
            print(f"   üìß Email: {nouveau_pompier.email}")
            print(f"   üîë Mot de passe: {password}")
            
            pompiers_ajoutes += 1
        
        # Sauvegarder tous les changements
        try:
            db.session.commit()
            print("\n" + "=" * 50)
            print(f"üéâ Import termin√© avec succ√®s !")
            print(f"‚úÖ {pompiers_ajoutes} pompiers ajout√©s")
            print(f"‚è≠Ô∏è  {pompiers_ignores} pompiers existants ignor√©s")
            print(f"üìä Total en base: {Pompier.query.count()} pompiers")
            print("\nüìù Note: Les mots de passe g√©n√©r√©s sont affich√©s ci-dessus.")
            print("   Vous devriez les communiquer aux pompiers pour qu'ils puissent se connecter.")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erreur lors de la sauvegarde: {e}")

if __name__ == '__main__':
    import_all_pompiers()
